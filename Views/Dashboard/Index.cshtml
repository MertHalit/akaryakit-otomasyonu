@{
    ViewData["Title"] = "Otomasyon Paneli";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2 class="mb-4">Panel</h2>

<div class="row mb-4">
    <div class="col-md-4">
        <div class="card text-white bg-primary mb-3">
            <div class="card-body">
                <h5 class="card-title">Toplam Yakıt Dolumu</h5>
                <p class="card-text display-6">@ViewBag.ToplamLitre L</p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card text-white bg-success mb-3">
            <div class="card-body">
                <h5 class="card-title">Tank Sayısı</h5>
                <p class="card-text display-6">@ViewBag.ToplamTank</p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card text-white bg-dark mb-3">
            <div class="card-body">
                <h5 class="card-title">Aktif Kullanıcılar</h5>
                <p class="card-text display-6">@ViewBag.AktifKullanici</p>
            </div>
        </div>
    </div>
</div>

<hr />

<h4>📊 Tanklara Göre Doluluk Oranı (%)</h4>
<canvas id="tankChart" width="600" height="300"></canvas>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const ctx = document.getElementById('tankChart').getContext('2d');

        const chartData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.TankChartData));

        const tankNames = chartData.map(item => item.name);
        const tankLevels = chartData.map(item => item.percentage);

        const backgroundColors = tankNames.map(() => {
            const r = Math.floor(Math.random() * 255);
            const g = Math.floor(Math.random() * 255);
            const b = Math.floor(Math.random() * 255);
            return `rgba(${r}, ${g}, ${b}, 0.6)`;
        });

        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: tankNames,
                datasets: [{
                    label: 'Doluluk (%)',
                    data: tankLevels,
                    backgroundColor: backgroundColors,
                    borderColor: backgroundColors.map(c => c.replace('0.6', '1')),
                    borderWidth: 1
                }]
            },
            options: {
                indexAxis: 'y',
                responsive: true,
                scales: {
                    x: {
                        beginAtZero: true,
                        max: 100
                    }
                }
            }
        });
    </script>
}
